/*
 * Node API
 * query node counts and pre-launch nodes
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.gridlastic.grid.client;

import com.google.gson.reflect.TypeToken;
import com.gridlastic.grid.ApiCallback;
import com.gridlastic.grid.ApiClient;
import com.gridlastic.grid.ApiException;
import com.gridlastic.grid.ApiResponse;
import com.gridlastic.grid.Pair;
import com.gridlastic.grid.model.NodeCount;
import com.gridlastic.grid.model.RequestPreset;


import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NodeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NodeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public NodeApi(String hubUrl, String gridUsername, String gridAccessKey) {
        ApiClient apiClient = new ApiClient().setBasePath(hubUrl);
        apiClient.setUsername(gridUsername);
        apiClient.setPassword(gridAccessKey);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for count
     *
     * @param browserName    (optional)
     * @param browserVersion (optional)
     * @param platformName   (optional)
     * @param _callback      Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> node counts </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call countCall(String browserName, String browserVersion, String platformName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/node/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (browserName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browserName", browserName));
        }

        if (browserVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("browserVersion", browserVersion));
        }

        if (platformName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("platformName", platformName));
        }

        final String[] localVarAccepts = {
                "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countValidateBeforeCall(String browserName, String browserVersion, String platformName, final ApiCallback _callback) throws ApiException {


        okhttp3.Call localVarCall = countCall(browserName, browserVersion, platformName, _callback);
        return localVarCall;

    }

    /**
     * Node counts
     * Returns total,busy and free node counts
     *
     * @param browserName    (optional)
     * @param browserVersion (optional)
     * @param platformName   (optional)
     * @return NodeCount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> node counts </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public NodeCount count(String browserName, String browserVersion, String platformName) throws ApiException {
        ApiResponse<NodeCount> localVarResp = countWithHttpInfo(browserName, browserVersion, platformName);
        return localVarResp.getData();
    }

    /**
     * Node counts
     * Returns total,busy and free node counts
     *
     * @param browserName    (optional)
     * @param browserVersion (optional)
     * @param platformName   (optional)
     * @return ApiResponse&lt;NodeCount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> node counts </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<NodeCount> countWithHttpInfo(String browserName, String browserVersion, String platformName) throws ApiException {
        okhttp3.Call localVarCall = countValidateBeforeCall(browserName, browserVersion, platformName, null);
        Type localVarReturnType = new TypeToken<NodeCount>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Node counts (asynchronously)
     * Returns total,busy and free node counts
     *
     * @param browserName    (optional)
     * @param browserVersion (optional)
     * @param platformName   (optional)
     * @param _callback      The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> node counts </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call countAsync(String browserName, String browserVersion, String platformName, final ApiCallback<NodeCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = countValidateBeforeCall(browserName, browserVersion, platformName, _callback);
        Type localVarReturnType = new TypeToken<NodeCount>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for preset
     *
     * @param requestPreset array of pre-launch parameters (required)
     * @param _callback     Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> request added into the queue </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call presetCall(RequestPreset requestPreset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[]{};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestPreset;

        // create path and map variables
        String localVarPath = "/node/preset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json", "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[]{"BasicAuth"};
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call presetValidateBeforeCall(RequestPreset requestPreset, final ApiCallback _callback) throws ApiException {

        // verify the required parameter 'requestPreset' is set
        if (requestPreset == null) {
            throw new ApiException("Missing the required parameter 'requestPreset' when calling preset(Async)");
        }


        okhttp3.Call localVarCall = presetCall(requestPreset, _callback);
        return localVarCall;

    }

    /**
     * Pre-launch nodes
     * pre-launch nodes
     *
     * @param requestPreset array of pre-launch parameters (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> request added into the queue </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public String preset(RequestPreset requestPreset) throws ApiException {
        ApiResponse<String> localVarResp = presetWithHttpInfo(requestPreset);
        return localVarResp.getData();
    }

    /**
     * Pre-launch nodes
     * pre-launch nodes
     *
     * @param requestPreset array of pre-launch parameters (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> request added into the queue </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public ApiResponse<String> presetWithHttpInfo(RequestPreset requestPreset) throws ApiException {
        okhttp3.Call localVarCall = presetValidateBeforeCall(requestPreset, null);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pre-launch nodes (asynchronously)
     * pre-launch nodes
     *
     * @param requestPreset array of pre-launch parameters (required)
     * @param _callback     The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details <table summary="Response Details" border="1">
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 202 </td><td> request added into the queue </td><td>  -  </td></tr>
     * <tr><td> 401 </td><td> Credentials are required to access this resource. </td><td>  -  </td></tr>
     * </table>
     */
    public okhttp3.Call presetAsync(RequestPreset requestPreset, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = presetValidateBeforeCall(requestPreset, _callback);
        Type localVarReturnType = new TypeToken<String>() {
        }.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
