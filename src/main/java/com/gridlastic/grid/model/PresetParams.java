/*
 * Node API
 * query node counts and pre-launch nodes
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.gridlastic.grid.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.io.IOException;
import java.util.Objects;

/**
 * PresetParams
 */
public class PresetParams {
    /**
     * browser name
     */
    @JsonAdapter(BrowserNameEnum.Adapter.class)
    public enum BrowserNameEnum {
        CHROME("chrome"),

        FIREFOX("firefox"),

        MICROSOFTEDGE("MicrosoftEdge");

        private String value;

        BrowserNameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static BrowserNameEnum fromValue(String value) {
            for (BrowserNameEnum b : BrowserNameEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<BrowserNameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final BrowserNameEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public BrowserNameEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return BrowserNameEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_BROWSER_NAME = "browserName";
    @SerializedName(SERIALIZED_NAME_BROWSER_NAME)
    private BrowserNameEnum browserName;

    public static final String SERIALIZED_NAME_BROWSER_VERSION = "browserVersion";
    @SerializedName(SERIALIZED_NAME_BROWSER_VERSION)
    private String browserVersion;

    /**
     * platform name
     */
    @JsonAdapter(PlatformNameEnum.Adapter.class)
    public enum PlatformNameEnum {
        WIN10("win10"),

        WIN11("win11"),

        LINUX("linux");

        private String value;

        PlatformNameEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static PlatformNameEnum fromValue(String value) {
            for (PlatformNameEnum b : PlatformNameEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<PlatformNameEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final PlatformNameEnum enumeration) throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public PlatformNameEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return PlatformNameEnum.fromValue(value);
            }
        }
    }

    public static final String SERIALIZED_NAME_PLATFORM_NAME = "platformName";
    @SerializedName(SERIALIZED_NAME_PLATFORM_NAME)
    private PlatformNameEnum platformName;

    public static final String SERIALIZED_NAME_COUNT = "count";
    @SerializedName(SERIALIZED_NAME_COUNT)
    private Integer count;

    public PresetParams() {
    }

    public PresetParams browserName(BrowserNameEnum browserName) {

        this.browserName = browserName;
        return this;
    }

    /**
     * browser name
     *
     * @return browserName
     **/
    @javax.annotation.Nonnull
    public BrowserNameEnum getBrowserName() {
        return browserName;
    }


    public void setBrowserName(BrowserNameEnum browserName) {
        this.browserName = browserName;
    }


    public PresetParams browserVersion(String browserVersion) {
        this.browserVersion = browserVersion;
        return this;
    }

    /**
     * Get browserVersion
     *
     * @return browserVersion
     **/
    @javax.annotation.Nonnull
    public String getBrowserVersion() {
        return browserVersion;
    }


    public void setBrowserVersion(String browserVersion) {
        this.browserVersion = browserVersion;
    }


    public PresetParams platformName(PlatformNameEnum platformName) {

        this.platformName = platformName;
        return this;
    }

    /**
     * platform name
     *
     * @return platformName
     **/
    @javax.annotation.Nonnull
    public PlatformNameEnum getPlatformName() {
        return platformName;
    }


    public void setPlatformName(PlatformNameEnum platformName) {
        this.platformName = platformName;
    }


    public PresetParams count(Integer count) {

        this.count = count;
        return this;
    }

    /**
     * Get count
     * minimum: 1
     * maximum: 1000
     *
     * @return count
     **/
    @javax.annotation.Nonnull
    public Integer getCount() {
        return count;
    }


    public void setCount(Integer count) {
        this.count = count;
    }


    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PresetParams presetParams = (PresetParams) o;
        return Objects.equals(this.browserName, presetParams.browserName) &&
                Objects.equals(this.browserVersion, presetParams.browserVersion) &&
                Objects.equals(this.platformName, presetParams.platformName) &&
                Objects.equals(this.count, presetParams.count);
    }

    @Override
    public int hashCode() {
        return Objects.hash(browserName, browserVersion, platformName, count);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PresetParams {\n");
        sb.append("    browserName: ").append(toIndentedString(browserName)).append("\n");
        sb.append("    browserVersion: ").append(toIndentedString(browserVersion)).append("\n");
        sb.append("    platformName: ").append(toIndentedString(platformName)).append("\n");
        sb.append("    count: ").append(toIndentedString(count)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

